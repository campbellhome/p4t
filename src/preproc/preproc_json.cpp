#define _HAS_EXCEPTIONS 0
#define _ITERATOR_DEBUG_LEVEL 0

#include "file_utils.h"
#include "preproc.h"
#include "sdict.h"

static void GenerateJsonHeader(sb_t *srcDir)
{
	sb_t data;
	sb_init(&data);
	sb_t *s = &data;

	sb_append(s, "// Copyright (c) 2012-2018 Matt Campbell\n");
	sb_append(s, "// MIT license (see License.txt)\n");
	sb_append(s, "\n");
	sb_append(s, "// AUTOGENERATED FILE - DO NOT EDIT\n");
	sb_append(s, "\n");
	sb_append(s, "// clang-format off\n");
	sb_append(s, "\n");
	sb_append(s, "#pragma once\n");
	sb_append(s, "\n");
	sb_append(s, "#include \"thirdparty/parson/parson.h\"\n");
	sb_append(s, "\n");
	sb_append(s, "#if defined(__cplusplus)\n");
	sb_append(s, "extern \"C\" {\n");
	sb_append(s, "#endif\n");
	sb_append(s, "\n");
	for(const struct_s &o : g_structs) {
		if(o.typedefBaseName.empty()) {
			sb_va(s, "struct %s;\n", o.name.c_str());
		} else {
			sb_va(s, "typedef struct %s %s;\n", o.typedefBaseName.c_str(), o.name.c_str());
		}
	}
	sb_append(s, "\n");
	for(const struct_s &o : g_structs) {
		sb_va(s, "%s json_deserialize_%s(JSON_Value *src);\n", o.name.c_str(), o.name.c_str());
	}
	sb_append(s, "\n");
	for(const struct_s &o : g_structs) {
		sb_va(s, "JSON_Value *json_serialize_%s(const %s *src);\n", o.name.c_str(), o.name.c_str());
	}
	sb_append(s, "\n");
	sb_append(s, "#if defined(__cplusplus)\n");
	sb_append(s, "} // extern \"C\"\n");
	sb_append(s, "#endif\n");

	sb_t path;
	sb_init(&path);
	sb_va(&path, "%s\\json_generated.h", sb_get(srcDir));
	fileData_writeIfChanged(sb_get(&path), NULL, { data.data, sb_len(s) });
	sb_reset(&path);
	sb_reset(&data);
}

enum memberJsonType_e {
	kMemberJsonObject,
	kMemberJsonBoolean,
	kMemberJsonNumber,
};

static memberJsonType_e ClassifyMemberJson(const struct_member_s &m)
{
	if(m.typeStr == "bool" || m.typeStr == "b32" || m.typeStr == "b8") {
		return kMemberJsonBoolean;
	}
	for(const struct_s &s : g_structs) {
		if(s.name == m.typeStr) {
			return kMemberJsonObject;
		}
	}
	return kMemberJsonNumber;
}

static void GenerateJsonSource(sb_t *srcDir)
{
	sb_t data;
	sb_init(&data);
	sb_t *s = &data;

	sb_append(s, "// Copyright (c) 2012-2018 Matt Campbell\n");
	sb_append(s, "// MIT license (see License.txt)\n");
	sb_append(s, "\n");
	sb_append(s, "// AUTOGENERATED FILE - DO NOT EDIT\n");
	sb_append(s, "\n");
	sb_append(s, "// clang-format off\n");
	sb_append(s, "\n");
	sb_append(s, "#include \"json_generated.h\"\n");
	sb_append(s, "#include \"va.h\"\n");
	sb_append(s, "\n");
	for(const std::string &str : g_paths) {
		sb_va(s, "#include \"%s\"\n", str.c_str());
	}
	sb_append(s, "\n");
	sb_append(s, "//////////////////////////////////////////////////////////////////////////\n");
	sb_append(s, "\n");
	for(const struct_s &o : g_structs) {
		if(o.headerOnly)
			continue;
		sb_va(s, "%s json_deserialize_%s(JSON_Value *src)\n", o.name.c_str(), o.name.c_str());
		sb_append(s, "{\n");
		sb_va(s, "\t%s dst;\n", o.name.c_str());
		sb_append(s, "\tmemset(&dst, 0, sizeof(dst));\n");
		sb_append(s, "\tif(src) {\n");
		sb_append(s, "\t\tJSON_Object *obj = json_value_get_object(src);\n");
		sb_append(s, "\t\tif(obj) {\n");
		for(const struct_member_s &m : o.members) {
			if(m.arr.empty()) {
				switch(ClassifyMemberJson(m)) {
				case kMemberJsonObject:
					sb_va(s, "\t\t\tdst.%s = json_deserialize_%s(json_object_get_value(obj, \"%s\"));\n",
					      m.name.c_str(), m.typeStr.c_str(), m.name.c_str());
					break;
				case kMemberJsonNumber:
					sb_va(s, "\t\t\tdst.%s = (%s)json_object_get_number(obj, \"%s\");\n",
					      m.name.c_str(), m.typeStr.c_str(), m.name.c_str());
					break;
				case kMemberJsonBoolean:
					sb_va(s, "\t\t\tdst.%s = json_object_get_boolean(obj, \"%s\");\n",
					      m.name.c_str(), m.name.c_str());
					break;
				}
			} else {
				sb_va(s, "\t\t\tfor(u32 i = 0; i < BB_ARRAYSIZE(dst.%s); ++i) {\n", m.name.c_str());
				switch(ClassifyMemberJson(m)) {
				case kMemberJsonObject:
					sb_va(s, "\t\t\t\tdst.%s[i] = json_deserialize_%s(json_object_get_value(obj, va(\"%s.%%u\", i));\n",
					      m.name.c_str(), m.typeStr.c_str(), m.name.c_str());
					break;
				case kMemberJsonNumber:
					sb_va(s, "\t\t\t\tdst.%s[i] = (%s)json_object_get_number(obj, va(\"%s.%%u\", i));\n",
					      m.name.c_str(), m.typeStr.c_str(), m.name.c_str());
					break;
				case kMemberJsonBoolean:
					sb_va(s, "\t\t\t\tdst.%s[i] = json_object_get_boolean(obj, va(\"%s.%%u\", i));\n",
					      m.name.c_str(), m.name.c_str());
					break;
				}
				sb_append(s, "\t\t\t}\n");
			}
		}
		sb_append(s, "\t\t}\n");
		sb_append(s, "\t}\n");
		sb_append(s, "\treturn dst;\n");
		sb_append(s, "}\n");
		sb_append(s, "\n");
	}
	sb_append(s, "//////////////////////////////////////////////////////////////////////////\n");
	sb_append(s, "\n");
	for(const struct_s &o : g_structs) {
		if(o.headerOnly)
			continue;
		sb_va(s, "JSON_Value *json_serialize_%s(const %s *src)\n", o.name.c_str(), o.name.c_str());
		sb_append(s, "{\n");
		sb_append(s, "\tJSON_Value *val = json_value_init_object();\n");
		sb_append(s, "\tJSON_Object *obj = json_value_get_object(val);\n");
		sb_append(s, "\tif(obj) {\n");
		for(const struct_member_s &m : o.members) {
			if(m.arr.empty()) {
				switch(ClassifyMemberJson(m)) {
				case kMemberJsonObject:
					sb_va(s, "\t\tjson_object_set_value(obj, \"%s\", json_serialize_%s(&src->%s));\n",
					      m.name.c_str(), m.typeStr.c_str(), m.name.c_str());
					break;
				case kMemberJsonNumber:
					sb_va(s, "\t\tjson_object_set_number(obj, \"%s\", src->%s);\n",
					      m.name.c_str(), m.name.c_str());
					break;
				case kMemberJsonBoolean:
					sb_va(s, "\t\tjson_object_set_boolean(obj, \"%s\", src->%s);\n",
					      m.name.c_str(), m.name.c_str());
					break;
				}
			} else {
				sb_va(s, "\t\tfor(u32 i = 0; i < BB_ARRAYSIZE(src->%s); ++i) {\n", m.name.c_str());
				switch(ClassifyMemberJson(m)) {
				case kMemberJsonObject:
					sb_va(s, "\t\t\tjson_object_set_value(obj, va(\"%s.%%u\", i), json_serialize_%s(&src->%s[i]));\n",
					      m.name.c_str(), m.typeStr.c_str(), m.name.c_str());
					break;
				case kMemberJsonNumber:
					sb_va(s, "\t\t\tjson_object_set_number(obj, va(\"%s.%%u\", i), src->%s[i]);\n",
					      m.name.c_str(), m.name.c_str());
					break;
				case kMemberJsonBoolean:
					sb_va(s, "\t\t\tjson_object_set_boolean(obj, va(\"%s.%%u\", i), src->%s[i]);\n",
					      m.name.c_str(), m.name.c_str());
					break;
				}
				sb_append(s, "\t\t}\n");
			}
		}
		sb_append(s, "\t}\n");
		sb_append(s, "\treturn val;\n");
		sb_append(s, "}\n");
		sb_append(s, "\n");
	}
	sb_append(s, "//////////////////////////////////////////////////////////////////////////\n");
	sb_t path;
	sb_init(&path);
	sb_va(&path, "%s\\json_generated.c", sb_get(srcDir));
	fileData_writeIfChanged(sb_get(&path), NULL, { data.data, sb_len(s) });
	sb_reset(&path);
	sb_reset(&data);
}

void GenerateJson(sb_t *srcDir)
{
	GenerateJsonHeader(srcDir);
	GenerateJsonSource(srcDir);
}
